package mainimport ( "fmt" "math")type shape interface { area() float64}type polygon interface { shape perim() float64}type curve interface { shape circonf() float64}type rect struct { name           string length, height float64}func (r *rect) area() float64 { return r.length * r.height}func (r *rect) perim() float64 { return 2*r.length + 2*r.height}func (r *rect) String() string { return fmt.Sprintf("%s [length: %.2f, height: %.2f]\n", r.name, r.length, r.height)}type triangle struct { name    string a, b, c float64}func (t *triangle) area() float64 { return (t.b * t.a) * 0.5}func (t *triangle) perim() float64 { return t.a + t.b + t.c}func (t *triangle) String() string { return fmt.Sprintf("%s [sides: a=%.2f, b=%.2f, c=%.2f]\n", t.name, t.a, t.b, t.c)}type circle struct { name string r    float64}func (c *circle) area() float64 { return math.Pi * (c.r * c.r)}func (c *circle) circonf() float64 { return 2 * math.Pi * c.r}func (c *circle) String() string { return fmt.Sprintf("%s [r= %.2f]", c.name, c.r)}func main() { var r *rect = &rect{  "Square A",  50.0,  30.0, } fmt.Println(r, shapePolygonInfo(r)) t := &triangle{  "Triangle A",  5,  5,  25, } fmt.Println(t, shapePolygonInfo(t)) var c *circle = &circle{  "Circle X",  10.0, } fmt.Println(c, shapeCurveInfo(c))}func shapeAreaInfo(s shape) string { return fmt.Sprintf("Area: %.2f\n", s.area())}func shapePolygonInfo(p polygon) string { temp := &triangle{  "Triangle A",  5,  5,  25, } tri, ok := p.(*triangle) if ok {  fmt.Println("------------- This is a triangle -------------")  fmt.Printf("Type: %v, tri: %v\n", tri.name, ok)  if *tri == *temp {   fmt.Println("Is triangle type")  } else {   fmt.Println("Other type: ", *temp)  } } else {  fmt.Println(tri, ok) } switch v := p.(type) { case *rect:  fmt.Println(">>>>>>>>>> This is a rect <<<<<<<<<<<<<")  fmt.Printf("%v", v) case *triangle:  fmt.Println(">>>>>>>>>> This is a triangle <<<<<<<<<<<<<")  fmt.Printf("%v", v) default:  fmt.Println(">>>>>>>>>> Not a triangle <<<<<<<<<<<<<")  fmt.Printf("%v", v) } return fmt.Sprintf("Area: %.2f, Perim: %.2f\n", p.area(), p.perim())}func shapeCurveInfo(c curve) string { switch v := c.(type) { case *circle:  fmt.Println(">>>>>>>>>> This is a circle <<<<<<<<<<<<<")  fmt.Printf("%v", v) default:  fmt.Println(">>>>>>>>>> Not a circle <<<<<<<<<<<<<")  fmt.Printf("%v", v) } return fmt.Sprintf("Area: %.2f, Circonf: %.2f\n", c.area(), c.circonf())}
